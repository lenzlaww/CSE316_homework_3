{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.createNewList = async function () {\n    async function asyncCreateNewList() {\n      let newList = {\n        name: 'Untitled',\n        songs: []\n      };\n      let response = await api.createNewList(newList);\n\n      if (response.data.success) {\n        console.log(response);\n        let playlist = response.data.playlist;\n        console.log(playlist);\n        let pair = store.idNamePairs;\n        let newpair = {\n          _id: playlist._id,\n          name: playlist.name\n        };\n        pair.push(newpair); //console.log(pair);\n\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n      }\n\n      return response.data.playlist._id;\n    }\n\n    let id = await asyncCreateNewList();\n    store.history.push(\"/playlist/\" + id);\n    console.log(store.history);\n  };\n\n  store.markListForDeletion = function () {\n    async function asyncMarkListForDeletion() {}\n\n    asyncMarkListForDeletion();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"5esZRSaCUwjeueF8RbldueI12xo=\");","map":{"version":3,"sources":["/Users/yuwenqianchen/Documents/SBU/CSE316_MK/Playlister_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","storeReducer","action","type","payload","playlist","MARK_LIST_FOR_DELETION","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","createNewList","asyncCreateNewList","newList","pair","newpair","markListForDeletion","asyncMarkListForDeletion"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false\n    });\n\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.createNewList = async function(){\n        async function asyncCreateNewList(){\n            let newList = {\n                name: 'Untitled',\n                songs:[]\n            }\n            let response = await api.createNewList(newList);\n            if(response.data.success){\n                console.log(response)\n                let playlist = response.data.playlist;\n                console.log(playlist);\n                let pair = store.idNamePairs;\n                let newpair = {\n                    _id: playlist._id, \n                    name: playlist.name\n                }\n                pair.push(newpair);\n                //console.log(pair);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                \n            }\n            return response.data.playlist._id;\n        }\n        let id = await asyncCreateNewList();\n        store.history.push(\"/playlist/\" + id)\n        console.log(store.history)\n    }\n\n    store.markListForDeletion = function(){\n        async function asyncMarkListForDeletion(){\n            \n        }\n        asyncMarkListForDeletion();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}