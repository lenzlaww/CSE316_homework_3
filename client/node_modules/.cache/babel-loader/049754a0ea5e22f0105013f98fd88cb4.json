{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  DELETE_LIST: \"DELETE_LIST\",\n  UPDATE_LIST: \"UPDATE_LIST\",\n  MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n  MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    targetDeleteList: null,\n    targetDeleteSongIndex: null,\n    targetEditSongIndex: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.playlist,\n            newListCounter: store.newListCounter,\n            listNameActive: false //MarkedListForDelete: null,\n\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false //MarkedListForDelete: null,\n\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false //MarkedListForDelete: null,\n\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            targetDeleteList: payload\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false //MarkedListForDelete: null,\n\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true //MarkedListForDelete: null,\n\n          });\n        }\n\n      case GlobalStoreActionType.DELETE_LIST:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter - 1,\n            listNameActive: false,\n            targetDeleteList: null\n          });\n        }\n\n      case GlobalStoreActionType.UPDATE_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            targetDeleteList: null\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            targetDeleteList: null,\n            targetDeleteSongIndex: payload\n          });\n        }\n\n      case GlobalStoreActionType.MARK_SONG_FOR_EDITION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            targetDeleteList: null,\n            targetDeleteSongIndex: null,\n            targetEditSongIndex: payload\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.createNewList = async function () {\n    async function asyncCreateNewList() {\n      let newList = {\n        name: 'Untitled',\n        songs: []\n      };\n      let response = await api.createNewList(newList);\n\n      if (response.data.success) {\n        //console.log(response)\n        let playlist = response.data.playlist; //console.log(playlist);\n\n        let pair = store.idNamePairs;\n        let newpair = {\n          _id: playlist._id,\n          name: playlist.name\n        };\n        pair.push(newpair); //console.log(pair);\n\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        });\n      }\n\n      return response.data.playlist._id;\n    }\n\n    let id = await asyncCreateNewList();\n    store.history.push(\"/playlist/\" + id); //console.log(store.history)\n  };\n\n  store.markListForDeletion = function (idNamePair) {\n    console.log(idNamePair);\n    let modal = document.getElementById('delete-list-modal');\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: idNamePair\n    });\n    console.log(store);\n  };\n\n  store.deleteListById = function (id) {\n    async function asyncDeleteListById(id) {\n      let res = await api.deleteListById(id);\n\n      if (res.data.success) {\n        //console.log(res.data)\n        let deleteListId = res.data.id;\n        let deleteListIndex;\n\n        for (let i = 0; i < store.idNamePairs.length; i++) {\n          if (store.idNamePairs[i]._id === deleteListId) {\n            deleteListIndex = i;\n          }\n        }\n\n        let idNamePairs = store.idNamePairs; //console.log(deleteListIndex)\n\n        idNamePairs.splice(deleteListIndex, 1); //console.log(idNamePairs)\n\n        storeReducer({\n          type: GlobalStoreActionType.DELETE_LIST,\n          payload: idNamePairs\n        });\n      }\n    }\n\n    asyncDeleteListById(id);\n  };\n\n  store.addSong = function () {\n    async function asyncAddSong() {\n      let newSong = {\n        title: \"Untitled\",\n        artist: \"Unknown\",\n        youTubeId: \"dQw4w9WgXcQ\"\n      };\n      let playlist = store.currentList;\n      playlist.songs.push(newSong);\n      console.log(playlist);\n      let response = await api.updatePlaylistById(playlist._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.UPDATE_LIST,\n          payload: playlist\n        });\n      }\n    }\n\n    ;\n    asyncAddSong();\n  };\n\n  store.markSongForDeletion = function (index) {\n    let modal = document.getElementById('delete-song-modal');\n    modal.classList.add(\"is-visible\");\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n      payload: index\n    });\n  };\n\n  store.deleteSong = function (index) {\n    async function asyncDeleteSong(index) {\n      console.log(store.currentList);\n      let currentList = store.currentList;\n      currentList.songs.splice(index, 1);\n      let rep = await api.updatePlaylistById(currentList._id, currentList);\n\n      if (rep.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.UPDATE_LIST,\n          payload: currentList\n        });\n      }\n    }\n\n    asyncDeleteSong(index);\n  };\n\n  store.markSongForEdition = function (index) {\n    let modal = document.getElementById('edit-song-modal');\n    modal.classList.add(\"is-visible\");\n    document.getElementById('title').value = store.currentList.songs[index].title;\n    document.getElementById('artist').value = store.currentList.songs[index].artist;\n    document.getElementById('youTubeId').value = store.currentList.songs[index].youTubeId;\n    storeReducer({\n      type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n      payload: index\n    });\n  };\n\n  store.editSong = function (index, new_song) {\n    async function asyncEditSong(index, new_song) {\n      let currentList = store.currentList;\n      currentList.songs[index] = new_song;\n      let res = await api.updatePlaylistById(currentList._id, currentList);\n\n      if (res.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.UPDATE_LIST,\n          payload: currentList\n        });\n      }\n    }\n\n    asyncEditSong(index, new_song);\n  };\n\n  store.addAdditionSongTransaction = function () {}; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"rL2p3fR+QxeDnmW3njOb2kAeVtw=\");","map":{"version":3,"sources":["/Users/yuwenqianchen/Documents/SBU/CSE316_MK/Playlister_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","GlobalStoreContext","AddSong_Transaction","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","DELETE_LIST","UPDATE_LIST","MARK_SONG_FOR_DELETION","MARK_SONG_FOR_EDITION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","targetDeleteList","targetDeleteSongIndex","targetEditSongIndex","storeReducer","action","type","payload","playlist","changeListName","id","newName","asyncChangeListName","response","getPlaylistById","data","success","name","updateList","updatePlaylistById","_id","getListPairs","getPlaylistPairs","pairsArray","closeCurrentList","loadIdNamePairs","asyncLoadIdNamePairs","console","log","setCurrentList","asyncSetCurrentList","history","push","getPlaylistSize","songs","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","createNewList","asyncCreateNewList","newList","pair","newpair","markListForDeletion","idNamePair","modal","document","getElementById","classList","add","deleteListById","asyncDeleteListById","res","deleteListId","deleteListIndex","i","splice","addSong","asyncAddSong","newSong","title","artist","youTubeId","markSongForDeletion","index","deleteSong","asyncDeleteSong","rep","markSongForEdition","value","editSong","new_song","asyncEditSong","addAdditionSongTransaction"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\n\nexport const GlobalStoreContext = createContext({});\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    DELETE_LIST:\"DELETE_LIST\",\n    UPDATE_LIST: \"UPDATE_LIST\",\n    MARK_SONG_FOR_DELETION: \"MARK_SONG_FOR_DELETION\",\n    MARK_SONG_FOR_EDITION: \"MARK_SONG_FOR_EDITION\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        targetDeleteList: null,\n        targetDeleteSongIndex: null,\n        targetEditSongIndex: null\n    });\n\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.playlist,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    //MarkedListForDelete: null,\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    //MarkedListForDelete: null,\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    //MarkedListForDelete: null,\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    targetDeleteList: payload,\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    //MarkedListForDelete: null,\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    //MarkedListForDelete: null,\n                });\n            }\n            case GlobalStoreActionType.DELETE_LIST:{\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter -1,\n                    listNameActive: false,\n                    targetDeleteList: null\n                })\n            }\n            case GlobalStoreActionType.UPDATE_LIST: {\n                return setStore({\n                    idNamePairs:store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    targetDeleteList: null\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    targetDeleteList: null,\n                    targetDeleteSongIndex: payload\n                })\n            }\n            case GlobalStoreActionType.MARK_SONG_FOR_EDITION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    targetDeleteList: null,\n                    targetDeleteSongIndex: null,\n                    targetEditSongIndex: payload\n                })\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    store.createNewList = async function(){\n        async function asyncCreateNewList(){\n            let newList = {\n                name: 'Untitled',\n                songs:[]\n            }\n            let response = await api.createNewList(newList);\n            if(response.data.success){\n                //console.log(response)\n                let playlist = response.data.playlist;\n                //console.log(playlist);\n                let pair = store.idNamePairs;\n                let newpair = {\n                    _id: playlist._id, \n                    name: playlist.name\n                }\n                pair.push(newpair);\n                //console.log(pair);\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                \n            }\n            return response.data.playlist._id;\n        }\n        let id = await asyncCreateNewList();\n        store.history.push(\"/playlist/\" + id)\n        //console.log(store.history)\n    }\n\n    store.markListForDeletion = function(idNamePair){\n        console.log(idNamePair)\n        let modal = document.getElementById('delete-list-modal');\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: idNamePair\n        });\n        console.log(store)\n    }\n\n    store.deleteListById = function(id){\n        async function asyncDeleteListById (id){\n            let res = await api.deleteListById(id);\n            if(res.data.success){\n                //console.log(res.data)\n                let deleteListId = res.data.id;\n                let deleteListIndex\n                for(let i = 0; i < store.idNamePairs.length; i++){\n                    if(store.idNamePairs[i]._id === deleteListId){\n                        deleteListIndex = i\n                    }\n                }\n                let idNamePairs = store.idNamePairs\n                //console.log(deleteListIndex)\n                idNamePairs.splice(deleteListIndex,1)\n                //console.log(idNamePairs)\n\n                storeReducer({\n                    type: GlobalStoreActionType.DELETE_LIST,\n                    payload: idNamePairs\n                })\n                \n            }\n\n        }\n        asyncDeleteListById(id);\n    }\n\n    store.addSong = function(){\n        async function asyncAddSong(){\n            let newSong ={\n                title: \"Untitled\",\n                artist: \"Unknown\",\n                youTubeId: \"dQw4w9WgXcQ\"\n            }\n            let playlist = store.currentList;\n            \n            playlist.songs.push(newSong);\n            console.log(playlist)\n            let response = await api.updatePlaylistById(playlist._id, playlist)\n            if (response.data.success){\n                storeReducer({\n                type: GlobalStoreActionType.UPDATE_LIST,\n                payload: playlist\n            })\n            }\n        };\n        asyncAddSong();\n    }\n\n    store.markSongForDeletion = function(index){\n        let modal = document.getElementById('delete-song-modal');\n        modal.classList.add(\"is-visible\");\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_DELETION,\n            payload: index\n        })\n    }\n    \n    store.deleteSong = function(index){\n        async function asyncDeleteSong(index){\n            console.log(store.currentList);\n            let currentList = store.currentList;\n            currentList.songs.splice(index,1)\n            let rep = await api.updatePlaylistById(currentList._id, currentList)\n            if(rep.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.UPDATE_LIST,\n                    payload: currentList\n                })\n            }\n        }\n        asyncDeleteSong(index)\n    }\n\n    store.markSongForEdition = function(index){\n        let modal = document.getElementById('edit-song-modal');\n        modal.classList.add(\"is-visible\");\n        document.getElementById('title').value = store.currentList.songs[index].title\n        document.getElementById('artist').value = store.currentList.songs[index].artist\n        document.getElementById('youTubeId').value = store.currentList.songs[index].youTubeId\n        storeReducer({\n            type: GlobalStoreActionType.MARK_SONG_FOR_EDITION,\n            payload: index\n        })\n    }\n\n    store.editSong = function(index, new_song){\n        async function asyncEditSong(index, new_song){\n            let currentList = store.currentList;\n            currentList.songs[index] = new_song;\n            let res = await api.updatePlaylistById(currentList._id, currentList);\n            if(res.data.success){\n                storeReducer({\n                    type: GlobalStoreActionType.UPDATE_LIST,\n                    payload: currentList\n                })\n            }\n        }\n        asyncEditSong(index, new_song)\n    }\n\n    store.addAdditionSongTransaction = function() {\n        \n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}